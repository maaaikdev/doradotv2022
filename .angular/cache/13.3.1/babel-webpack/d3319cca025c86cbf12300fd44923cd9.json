{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./broker.service\";\nexport let ProjectsService = /*#__PURE__*/(() => {\n  class ProjectsService {\n    constructor(router, broker) {\n      this.router = router;\n      this.broker = broker;\n      this.spinnerActive = true;\n    }\n\n    openProject(itemArrived) {\n      this.projectAuthor = itemArrived;\n      this.dataProject = itemArrived.id;\n      this.dataProjectVimeo = itemArrived.vimeo;\n      this.router.navigate(['/project']); //this.router.navigate(['/project'],{ queryParams: { category: this.projectAuthor.services[0].service_id.slug, idProject: this.projectAuthor.gif.id } });\n    }\n\n    colorCategory(bgProj) {\n      this.spinnerActive = true;\n      this.broker.projectsService(bgProj).subscribe(response => {\n        this.workers = response;\n\n        if (this.workers.data[0].workers[0] == undefined) {\n          $(\"#menuModal\").modal('hide');\n          this.router.navigate(['/']);\n        } else {\n          this.workerData = this.workers.data[0].workers[0];\n          $(\"#menuModal\").modal('hide');\n          this.broker.workerProjects(this.workers.data[0].workers[0].worker_id.slug).subscribe(response => {\n            var _a;\n\n            this.broker.authorWorker = response;\n            console.log(\"AUTHOR ROKER\", this.broker.authorWorker); //this.nextProject(this.broker.authorWorker.data[0].projects);\n\n            this.broker.projects = (_a = this.broker.authorWorker) === null || _a === void 0 ? void 0 : _a.data[0].projects;\n          });\n          this.spinnerActive = false;\n          this.router.navigate(['/studio'], {\n            queryParams: {\n              category: bgProj\n            }\n          });\n        }\n      });\n    }\n\n    scrollToElement($element) {\n      console.log($element);\n      $element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\"\n      });\n    }\n\n    nextProject(next) {\n      this.nextProjectAdd = next;\n      console.log(\"NEXT NEXT 11111\", this.nextProjectAdd);\n      let text = \"\";\n\n      for (let i = 0; i < this.nextProjectAdd.length; i++) {\n        text = this.nextProjectAdd[i].project_id;\n        console.log(\"NEW ARRAY\", text);\n      } //console.log(\"NEW ARRAY\", this.nextProjectAdd)\n      // this.nextProjectAdd.forEach(element => {\n      // \tconsole.log(\"ARRAY NEXT PROJECT\",element.project_id);\n      // \tthis.nextProjectAdd = element.project_id;\n      // });\n\n    }\n\n  }\n\n  ProjectsService.ɵfac = function ProjectsService_Factory(t) {\n    return new (t || ProjectsService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.BrokerService));\n  };\n\n  ProjectsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectsService,\n    factory: ProjectsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProjectsService;\n})();","map":null,"metadata":{},"sourceType":"module"}